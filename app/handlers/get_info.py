import sqlite3, googleapiclient, httplib2, asyncio, pandas as pd
from utilits import keyboards
from aiogram import F, Router, types, Dispatcher, Bot
import googleapiclient.discovery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from aiogram.fsm.state import StatesGroup, State
from oauth2client.service_account import ServiceAccountCredentials
from GPTAPI import *
from aiogram.enums import ParseMode
from openai import RateLimitError
from openai import AuthenticationError
from aiogram.exceptions import TelegramNetworkError
from openai import PermissionDeniedError, APITimeoutError
from loguru import logger

from app.handlers.gen_main import generate
from aiohttp.client_exceptions import ClientConnectionError
import random
from config.config import *

client = AsyncOpenAI(
    api_key=apiKey)

router = Router()
conn = sqlite3.connect("database/databasetg.db")
cursor = conn.cursor()
Requestor = RequestAPI(client)

global info
global info_2
global kand_input
global info_q_2


def get_service_sacc():
    scopes = ['https://www.googleapis.com/auth/spreadsheets']
    creds_service = ServiceAccountCredentials.from_json_keyfile_name('filestoread/dnd.json', scopes).authorize(httplib2.Http())
    return googleapiclient.discovery.build('sheets', 'v4', http=creds_service)


async def make_a_choice(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–∏—Ä–∞–π—Ç–µ", reply_markup=keyboards.KeyboardCheck())
    await callback.answer()

# <---------------------------------------------------------------------->


async def checking_if_ready(callback: types.CallbackQuery):
    global info
    global info_2
    resp = get_service_sacc().spreadsheets().values().get(spreadsheetId='17pVHk1aAVC07W_1dWaVCkxJCku_CaOzFD6-7pT_W2hE',
                                                          range="–æ—Ç–≤–µ—Ç—ã!A2:K500").execute()

    pd.DataFrame(resp['values']).to_csv('filestoread/res.csv')

    #TODO: –≤—ã–±–∏—Ä–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ —Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É

    res_master = cursor.execute("SELECT master FROM men")
    users_master = [x[0] for x in res_master.fetchall()]

    res_user = cursor.execute("SELECT user FROM men")
    users = [x[0] for x in res_user.fetchall()]

    myusers = [users[i] for i in range(len(users)) if users_master[i] == callback.from_user.username]
    print(myusers)

    answer = []
    for ans in resp['values']:
        if len(ans) != 0:
            if ans[-1] in myusers:
                answer.append(ans)
    length = len(answer)
    print(length, resp['values'])
    print(answer)

    res_master = cursor.execute("SELECT master FROM men")
    users_master = [x[0] for x in res_master.fetchall()]

    k = 0
    for master in users_master:
        if master == callback.from_user.username:
            k += 1

    if k != length:
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –µ—â–µ <b>–Ω–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏</b> –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–ø–æ–∑–∂–µ!",
            reply_markup=keyboards.KeyboardBackGetInfo(), parse_mode=ParseMode.HTML)
    else:
        try:
            await callback.message.edit_text(
                "–ú—ã <b>–ø–æ–ª—É—á–∏–ª–∏</b> –¥–∞–Ω–Ω—ã–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ <i>20 —Å–µ–∫—É–Ω–¥</i>, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤", parse_mode=ParseMode.HTML)
            info = pd.DataFrame(answer).to_string()
            # info = pd.read_csv('filestoread/res.csv').to_string()
            info = await Requestor.get_request(AnalyzeBF(), info)
            await asyncio.sleep(7)
            print("DONE info")

            info_2 = await Requestor.get_request(RecommendationsBF(npc_indication="–ë—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—É–Ω–∫—Ç–∞ npc_number. –ï—Å–ª–∏ npc_number = '–ú–Ω–æ–≥–æ', —Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å npc –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [7;9]. –ï—Å–ª–∏ npc_number = '–ú–∞–ª–æ', —Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å npc –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [2;4]. –ï—Å–ª–∏ npc_number = '–°—Ä–µ–¥–Ω–µ', —Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å npc –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [4;7] "), str(info))
            await asyncio.sleep(7)
            print("DONE info_2")

            await callback.message.edit_text("<b>–û—Ç–≤–µ—Ç—ã –≥–æ—Ç–æ–≤—ã!</b>\n–ü—Ä–æ–π–¥–∏—Ç–µ –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ üö™–û—Ç–∫—Ä—ã—Ç—å",
                                             reply_markup=keyboards.KeyboardBackGetInfo(), parse_mode=ParseMode.HTML)
        except (RateLimitError, AuthenticationError, TelegramNetworkError, PermissionDeniedError, APITimeoutError) as e:
            print(e)
            await callback.message.edit_text("üõë–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=keyboards.KeyboardBackGetInfo(), parse_mode=ParseMode.HTML)


async def salvation(message: types.Message):
    global info
    global info_2
    resp = get_service_sacc().spreadsheets().values().get(spreadsheetId='17pVHk1aAVC07W_1dWaVCkxJCku_CaOzFD6-7pT_W2hE',
                                                          range="–æ—Ç–≤–µ—Ç—ã!A2:K500").execute()

    pd.DataFrame(resp['values']).to_csv('filestoread/res.csv')

    res_master = cursor.execute("SELECT master FROM men")
    users_master = [x[0] for x in res_master.fetchall()]

    res_user = cursor.execute("SELECT user FROM men")
    users = [x[0] for x in res_user.fetchall()]

    myusers = [users[i] for i in range(len(users)) if users_master[i] == message.from_user.username]
    print(myusers)

    answer = []
    for ans in resp['values']:
        if len(ans) != 0:
            if ans[-1] in myusers:
                print(ans[-1])
                answer.append(ans)
    length = len(answer)
    print(length, resp['values'])
    await message.answer("–ú—ã <b>–ø–æ–ª—É—á–∏–ª–∏</b> –¥–∞–Ω–Ω—ã–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ <i>20 —Å–µ–∫—É–Ω–¥</i>, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤", parse_mode=ParseMode.HTML)

    try:
        info = pd.read_csv('filestoread/res.csv').to_string()
        info = await Requestor.get_request(AnalyzeBF(), info)
        await asyncio.sleep(7)
        print("DONE info")

        info_2 = await Requestor.get_request(RecommendationsBF(), str(info))
        await asyncio.sleep(7)
        print("DONE info_2")

        print(info_2)
        await message.edit_text("<b>–û—Ç–≤–µ—Ç—ã –≥–æ—Ç–æ–≤—ã!</b>\n–ü—Ä–æ–π–¥–∏—Ç–µ –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ üö™–û—Ç–∫—Ä—ã—Ç—å",
                                reply_markup=keyboards.KeyboardBackGetInfo(), parse_mode=ParseMode.HTML)
    except RateLimitError or AuthenticationError:
        await message.edit_text("üõë–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ OpenAI", reply_markup=keyboards.KeyboardBackGetInfo(), parse_mode=ParseMode.HTML)

# <---------------------------------------------------------------------->


async def choosing_type_survey(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(f"   {info_2.setting}", reply_markup=keyboards.KeyboardInfo())
        await callback.answer()
    except NameError as e:
        await callback.message.edit_text("üö∑C—é–¥–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–ª—å–∑—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, –Ω–∞–∂–∞–≤ ‚úîÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å ",
                                         reply_markup=keyboards.KeyboardBackGetInfo())
        await callback.answer()


# <---------------------------------------------------------------------->


async def plot(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:", reply_markup=keyboards.KeyboardStoryline())
    except NameError:
        await callback.message.edit_text(f"<b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É! –°–ø–µ—Ä–≤–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç</b>", reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
    await callback.answer()

async def beginning(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(f"{info_2.beginning}", reply_markup=keyboards.KeyboardBackPlotInfo())
    except NameError:
        await callback.message.edit_text(f"<b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É! –°–ø–µ—Ä–≤–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç</b>", reply_markup=keyboards.KeyboardBackPlotInfo(), parse_mode=ParseMode.HTML)
        await callback.answer()


async def center(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(f"{info_2.story_itself}", reply_markup=keyboards.KeyboardBackPlotInfo())
    except NameError:
        await callback.message.edit_text(f"<b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É! –°–ø–µ—Ä–≤–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç</b>", reply_markup=keyboards.KeyboardBackPlotInfo(), parse_mode=ParseMode.HTML)
        await callback.answer()


async def ending(callback: types.CallbackQuery):
    try:
        ans = ""
        for end in info_2.endings:
            ans += f"|<b>{end.type}</b>\n {end.description}\n\n"
        await callback.message.edit_text(ans, reply_markup=keyboards.KeyboardBackPlotInfo(), parse_mode=ParseMode.HTML)
    except NameError:
        await callback.message.edit_text(f"<b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É! –°–ø–µ—Ä–≤–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç</b>", reply_markup=keyboards.KeyboardBackPlotInfo(), parse_mode=ParseMode.HTML)
        await callback.answer()



# <---------------------------------------------------------------------->


class LocState(StatesGroup):
    waiting_location = State()
    waiting_agree = State()


@router.callback_query(F.data == "locations")
async def locations(callback: types.CallbackQuery, state: FSMContext):
    try:
        ans = ""
        for end in info_2.locations:
            ans += f"|<b>{end.name}</b>\n {end.description}\n\n"
        ans += "-----------------------------------------------------\n\n"
        ans += f"<b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ –µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ <i>–Ω–∞–∑–≤–∞–Ω–∏–µ</i> –ª–æ–∫–∞—Ü–∏–∏</b>\n"
        await callback.message.edit_text(ans, reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
        await state.set_state(LocState.waiting_location)
    except NameError:
        await callback.message.edit_text(f"<b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É! –°–ø–µ—Ä–≤–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç</b>", reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
        await callback.answer()


@router.message(LocState.waiting_location, F.text)
async def location_sending(message: types.Message, state: FSMContext):
    global kand_input
    locs = [loc.name for loc in info_2.locations]
    print(locs)
    if message.text in locs:
        await message.answer('<i>–ù–∞—á–∞–ª–∏ –≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å!</i> –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥', parse_mode=ParseMode.HTML)
        for end in info_2.locations:
            if message.text == end.name:
                try:
                    data = f"setting='{info_2.setting}' name='{end.name}', description='{end.description}'"
                    kand_input = await Requestor.get_request(RecommendationsLOC(), data)
                    print(kand_input)
                    await generate(style='ANIME', width=1024, height=1024,
                                   query=f"{kand_input.kandinsky_appearance}. Stylized: stained glass, watercolor.",
                                   file_name='images/imagel.png')
                    file = FSInputFile('images/imagel.png')
                    ans = f"<b>{kand_input.name}</b>\n\n"
                    ans += f"{kand_input.appearance}\n\n"
                    await message.answer_photo(file, caption=ans,
                                               reply_markup=keyboards.KeyboardBackMoreInfoWithoutEdit(),
                                               parse_mode=ParseMode.HTML)
                    await state.set_state(LocState.waiting_agree)
                except TypeError as e:
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=keyboards.KeyboardBackMoreInfo())


    else:
        await message.answer("–¢–∞–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç", reply_markup=keyboards.KeyboardBackMoreInfo(),
                             parse_mode=ParseMode.HTML)
        return location_sending


@router.callback_query(LocState.waiting_agree, F.data == "send_players")
async def location_agree(message: types.Message, bot:Bot, state: FSMContext):
    res_master = cursor.execute("SELECT id FROM men")
    ids = [x[0] for x in res_master.fetchall()]

    res_master = cursor.execute("SELECT master FROM men")
    users_master = [x[0] for x in res_master.fetchall()]

    file = FSInputFile('images/imagel.png')
    ans = f"<b>{kand_input.name}</b>\n\n"
    ans += f"{kand_input.appearance}\n\n"

    for i in range(len(ids)):
        if users_master[i] == message.from_user.username:
            print(ids[i])
            await bot.send_photo(chat_id=ids[i], caption=ans, parse_mode=ParseMode.HTML, photo=file, reply_markup=keyboards.KeyboardBackPlayer())
    await bot.send_message(chat_id=message.from_user.id, text="–ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –ª–æ–∫–∞—Ü–∏–∏", reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
    await state.clear()
# <---------------------------------------------------------------------->


class NpcMoreState(StatesGroup):
    waiting_npc = State()
    waiting_agree = State()


@router.callback_query(F.data == "npcs")
async def npcs(callback: types.CallbackQuery, state: FSMContext):
    try:
        ans = ""
        for npc in info_2.npcs:
            ans += f"|<b>{npc.name}</b> ({npc.type})\n {npc.description}\n <i>–õ–æ–∫–∞—Ü–∏–∏</i>: "
            for loc in npc.locations:
                ans += f"{loc}; "
            ans += "\n\n"
        ans += "-----------------------------------------------------\n\n"
        ans += f"<b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –∞ —Ç–∞–∫–∂–µ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ <i>–∏–º—è</i> –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n"

        await callback.message.edit_text(ans, reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
        await state.set_state(NpcMoreState.waiting_npc)
    except NameError:
        await callback.message.edit_text(f"<b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É! –°–ø–µ—Ä–≤–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç</b>", reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
    await callback.answer()



@router.message(NpcMoreState.waiting_npc, F.text)
async def npc_sending(message: types.Message, state: FSMContext):
    global kand_input
    npcs = [char.name for char in info_2.npcs]
    print(npcs)
    if message.text in npcs:
        await message.answer('<i>–ù–∞—á–∞–ª–∏ –≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å!</i> –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥',
                             reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
        for end in info_2.npcs:
            if message.text == end.name:
                data = f"setting='{info_2.setting}' type='{end.type}' name='{end.name}', description='{end.description}'"
                kand_input = await Requestor.get_request(RecommendationsAC(
                    phrases_indication='–ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ñ—Ä–∞–∑ –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è –ø–æ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã personality –∏ description. –¢–∞–∫–∂–µ —Ñ—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –≤–æ—Ç —Ç–∞–∫–∏—Ö —Å–∫–æ–±–∫–∞—Ö ¬´...¬ª'),
                                                         data)
                print(kand_input)
                await generate(style='ANIME', width=1024, height=1024,
                               query=f"{kand_input.kandinsky_appearance}. Stylized: stained glass, watercolor.",
                               file_name='images/image2.png')
                file = FSInputFile('images/image2.png')
                ans = f"<b>{kand_input.name}</b> ({kand_input.type}|{kand_input.gender})\n\n"
                ans += f"{kand_input.appearance}\n\n"
                ans += f"<b>–§—Ä–∞–∑—ã:</b>\n"
                for phr in kand_input.phrases:
                    ans += f"-<i>{phr.theme}</i>. {phr.phrase}\n\n"
                await message.answer_photo(file, caption=ans,
                                           reply_markup=keyboards.KeyboardBackMoreInfoWithoutEdit(),
                                           parse_mode=ParseMode.HTML)
                await state.set_state(NpcMoreState.waiting_agree)
    else:
        # print('none')
        await message.answer("–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç", reply_markup=keyboards.KeyboardBackMoreInfo(),
                             parse_mode=ParseMode.HTML)
        return npc_sending


@router.callback_query(NpcMoreState.waiting_agree, F.data == "send_players")
async def npc_agree(message: types.Message, bot:Bot, state: FSMContext):
    res_master = cursor.execute("SELECT id FROM men")
    ids = [x[0] for x in res_master.fetchall()]

    res_master = cursor.execute("SELECT master FROM men")
    users_master = [x[0] for x in res_master.fetchall()]

    file = FSInputFile('images/image2.png')
    ans = f"<b>{kand_input.name}</b>\n\n"
    ans += f"{kand_input.appearance}\n\n"

    for i in range(len(ids)):
        if users_master[i] == message.from_user.username:
            print(ids[i])
            await bot.send_photo(chat_id=ids[i], caption=ans, parse_mode=ParseMode.HTML, photo=file)
    await bot.send_message(chat_id=message.from_user.id, text="–ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
    await state.clear()

# <---------------------------------------------------------------------->


class EnemyState(StatesGroup):
    waiting_enemy = State()
    waiting_agree = State()


@router.callback_query(F.data == "enemies")
async def enemies(callback: types.CallbackQuery, state: FSMContext):
    try:
        ans = ""
        for end in info_2.enemies:
            ans += f"|<b>{end.name}</b> ({end.type})\n {end.description}\n\n"
        ans += "-----------------------------------------------------\n\n"
        ans += f"<b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –∞ —Ç–∞–∫–∂–µ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ <i>–∏–º—è</i> –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n"
        await callback.message.edit_text(ans, reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
        await state.set_state(EnemyState.waiting_enemy)
    except NameError:
        await callback.message.edit_text(f"<b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É! –°–ø–µ—Ä–≤–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç</b>", reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
    await callback.answer()


@router.message(EnemyState.waiting_enemy, F.text)
async def enemy_sending(message: types.Message, state: FSMContext):
    global kand_input
    enemies = [char.name for char in info_2.enemies]
    print(enemies)
    if message.text in enemies:
        await message.answer('<i>–ù–∞—á–∞–ª–∏ –≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å!</i> –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥',
                             reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
        for end in info_2.enemies:
            if message.text == end.name:
                data = f"setting='{info_2.setting}' type='{end.type}' name='{end.name}', description='{end.description}'"
                kand_input = await Requestor.get_request(RecommendationsAC(
                    phrases_indication='–ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ñ—Ä–∞–∑ –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è –ø–æ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã personality –∏ description. –¢–∞–∫–∂–µ —Ñ—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –≤–æ—Ç —Ç–∞–∫–∏—Ö —Å–∫–æ–±–∫–∞—Ö ¬´...¬ª'),
                                                         data)
                print(kand_input)
                await generate(style='ANIME', width=1024, height=1024,
                               query=f"{kand_input.kandinsky_appearance}. Stylized: stained glass, watercolor.",
                               file_name='images/image3.png')
                file = FSInputFile('images/image3.png')
                ans = f"<b>{kand_input.name}</b> ({kand_input.type}|{kand_input.gender})\n\n"
                ans += f"{kand_input.appearance}\n\n"
                ans += f"<b>–§—Ä–∞–∑—ã:</b>\n"
                for phr in kand_input.phrases:
                    ans += f"-<i>{phr.theme}</i>. {phr.phrase}\n\n"
                await message.answer_photo(file, caption=ans, reply_markup=keyboards.KeyboardBackMoreInfoWithoutEdit(),
                                           parse_mode=ParseMode.HTML)
                await state.set_state(EnemyState.waiting_agree)
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç", reply_markup=keyboards.KeyboardBackMoreInfo(),
                             parse_mode=ParseMode.HTML)
        return enemy_sending


@router.callback_query(EnemyState.waiting_agree, F.data == "send_players")
async def enemy_agree(message: types.Message, bot:Bot, state: FSMContext):
    res_master = cursor.execute("SELECT id FROM men")
    ids = [x[0] for x in res_master.fetchall()]

    res_master = cursor.execute("SELECT master FROM men")
    users_master = [x[0] for x in res_master.fetchall()]

    file = FSInputFile('images/image3.png')
    ans = f"<b>{kand_input.name}</b>\n\n"
    ans += f"{kand_input.appearance}\n\n"

    for i in range(len(ids)):
        if users_master[i] == message.from_user.username:
            print(ids[i])
            await bot.send_photo(chat_id=ids[i], caption=ans, parse_mode=ParseMode.HTML, photo=file)
    await bot.send_message(chat_id=message.from_user.id, text="–ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
    await state.clear()

# <---------------------------------------------------------------------->


class BH_State(StatesGroup):
    waiting_bh = State()
    waiting_agree = State()


@router.callback_query(F.data == "bosses_heroes")
async def bosses_heroes(callback: types.CallbackQuery, state: FSMContext):
    try:
        ans = ""
        for end in info_2.bosses_heroes:
            ans += f"|<b>{end.name}</b> ({end.type})\n {end.description}\n\n"
        ans += "-----------------------------------------------------\n\n"
        ans += f"<b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –∞ —Ç–∞–∫–∂–µ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ <i>–∏–º—è</i> –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n"
        await callback.message.edit_text(ans, reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
        await state.set_state(BH_State.waiting_bh)
    except NameError:
        await callback.message.edit_text(f"<b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É! –°–ø–µ—Ä–≤–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç</b>", reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
    await callback.answer()


@router.message(BH_State.waiting_bh, F.text)
async def bh_sending(message: types.Message, state: FSMContext):
    global kand_input
    bh = [char.name for char in info_2.bosses_heroes]
    print(bh)
    if message.text in bh:
        await message.answer('<i>–ù–∞—á–∞–ª–∏ –≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å!</i> –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥',
                             reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
        for end in info_2.bosses_heroes:
            if message.text == end.name:
                data = f"setting='{info_2.setting}' type='{end.type}' name='{end.name}', description='{end.description}'"
                kand_input = await Requestor.get_request(RecommendationsAC(
                    phrases_indication='–ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ñ—Ä–∞–∑ –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è –ø–æ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã personality –∏ description. –¢–∞–∫–∂–µ —Ñ—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –≤–æ—Ç —Ç–∞–∫–∏—Ö —Å–∫–æ–±–∫–∞—Ö ¬´...¬ª'),
                                                         data)
                print(kand_input)
                await generate(style='ANIME', width=1024, height=1024,
                               query=f"{kand_input.kandinsky_appearance}. Stylized: stained glass, watercolor.",
                               file_name='images/image4.png')
                file = FSInputFile('images/image4.png')
                ans = f"<b>{kand_input.name}</b> ({kand_input.type}|{kand_input.gender})\n\n"
                ans += f"{kand_input.appearance}\n\n"
                ans += f"<b>–§—Ä–∞–∑—ã:</b>\n"
                for phr in kand_input.phrases:
                    ans += f"-<i>{phr.theme}</i>. {phr.phrase}\n\n"
                await message.answer_photo(file, caption=ans, reply_markup=keyboards.KeyboardBackMoreInfoWithoutEdit(),
                                           parse_mode=ParseMode.HTML)
                await state.set_state(BH_State.waiting_agree)
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç", reply_markup=keyboards.KeyboardBackMoreInfo(),
                             parse_mode=ParseMode.HTML)
        return bh_sending


@router.callback_query(BH_State.waiting_agree, F.data == "send_players")
async def bh_agree(message: types.Message, bot:Bot, state: FSMContext):
    res_master = cursor.execute("SELECT id FROM men")
    ids = [x[0] for x in res_master.fetchall()]

    res_master = cursor.execute("SELECT master FROM men")
    users_master = [x[0] for x in res_master.fetchall()]

    file = FSInputFile('images/image4.png')
    ans = f"<b>{kand_input.name}</b>\n\n"
    ans += f"{kand_input.appearance}\n\n"

    for i in range(len(ids)):
        if users_master[i] == message.from_user.username:
            print(ids[i])
            await bot.send_photo(chat_id=ids[i], caption=ans, parse_mode=ParseMode.HTML, photo=file)
    await bot.send_message(chat_id=message.from_user.id, text="–ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
    await state.clear()
# <---------------------------------------------------------------------->


async def more_info(callback: types.CallbackQuery):
    v = ["–î–∞", "–ù–µ—Ç"]
    try:
        ans = "|<b>–°–µ—Ç—Ç–∏–Ω–≥</b>\n"
        for end in info.settings:
            ans += f"-<i>{end.type}</i>. {end.justification}\n"
        ans += "\n"
        ans += f"|<b>–ì–µ–π–º–ø–ª–µ–π–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ</b>\n {info.gameplay_style}\n\n" \
               f"|<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ NPC</b>\n {info.npc_number}\n\n" \
               f"|<b>–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏</b>\n {info.days_duration} –¥–Ω—è\n\n" \
               f"|<b>–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π</b>\n {info.session_duration} —á–∞—Å–∞/–æ–≤\n\n"
        ans += f"|<b>–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–∞–≥–∏ –∏ NPC</b>\n"
        for end in info.enemy_npc:
            ans += f"-<i>{end.type}</i>. {end.justification}\n"
        ans += "\n"
        ans += f"|<b>–ê—É–¥–∏–æ–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ</b>\n {random.choice(v)}\n\n" \
               f"|<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞—Ü–∏–π</b>\n {info.location_number}\n\n"
        ans += "|–ü—Ä–∏—á–∏–Ω—ã –∏–≥—Ä—ã\n"
        for end in info.purpose_game:
            ans += f"-<i>{end.type}</i>. {end.justification}\n"

        await callback.message.edit_text(ans, reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
    except NameError:
        await callback.message.edit_text(f"<b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É! –°–ø–µ—Ä–≤–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç</b>", reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
    await callback.answer()


# async def send_players(bot: Bot, callback: types.CallbackQuery):





# Quest sending part
# <---------------------------------------------------------------------->


async def make_a_choice_quest(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–∏—Ä–∞–π—Ç–µ", reply_markup=keyboards.KeyboardQuestGen())
    await callback.answer()


async def checking_if_ready_quest(callback: types.CallbackQuery):
    global info_q_2

    resp = get_service_sacc().spreadsheets().values().get(spreadsheetId='17pVHk1aAVC07W_1dWaVCkxJCku_CaOzFD6-7pT_W2hE',
                                                          range="–æ—Ç–≤–µ—Ç—ã_–∏–≥—Ä—ã!A2:E500").execute()

    pd.DataFrame(resp['values']).to_csv('filestoread/res_q.csv')

    res_master = cursor.execute("SELECT master FROM men")
    users_master = [x[0] for x in res_master.fetchall()]

    res_user = cursor.execute("SELECT user FROM men")
    users = [x[0] for x in res_user.fetchall()]

    myusers = [users[i] for i in range(len(users)) if users_master[i] == callback.from_user.username]
    print(myusers)

    answer = []
    for ans in resp['values']:
        if len(ans) != 0:
            if ans[-1] in myusers:
                print(ans[-1])
                answer.append(ans)
    length = len(answer)
    print(length, resp['values'])

    res_master = cursor.execute("SELECT master FROM men")
    users_master = [x[0] for x in res_master.fetchall()]

    k = 0

    for master in users_master:
        if master == callback.from_user.username:
            k += 1

    if k != length:
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –µ—â–µ <b>–Ω–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏</b> –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–ø–æ–∑–∂–µ!",
            reply_markup=keyboards.KeybaordBackQuest(), parse_mode=ParseMode.HTML)
    else:
        await callback.message.edit_text(
            "–ú—ã <b>–ø–æ–ª—É—á–∏–ª–∏</b> –¥–∞–Ω–Ω—ã–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ <i>20 —Å–µ–∫—É–Ω–¥</i>, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤", parse_mode=ParseMode.HTML)
        try:
            await asyncio.sleep(7)
            info_q_2 = await Requestor.get_request(RecommendationsQQ(npc_indication="–í –∫–≤–µ—Å—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ npcs –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"), str(info_2))
            await asyncio.sleep(7)
            print("DONE info_2_–π")

            print(info_q_2)
            await callback.message.edit_text("<b>–ö–≤–µ—Å—Ç –≥–æ—Ç–æ–≤!</b>\n–ü—Ä–æ–π–¥–∏—Ç–µ –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ üö™–û—Ç–∫—Ä—ã—Ç—å",
                                             reply_markup=keyboards.KeybaordBackQuest(), parse_mode=ParseMode.HTML)
        except (RateLimitError, NameError) as e:
            print(e)
            await callback.message.edit_text("üõë–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø–µ—Ä–≤–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Ç–∏–∏. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, —Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ OpenAI", reply_markup=keyboards.KeyboardBack(), parse_mode=ParseMode.HTML)


async def sending_quest_info(callback: types.CallbackQuery):
    try:
        ans = f"<b>{info_q_2.quest_name}</b> ({info_q_2.location})\n\n{info_q_2.description}"
        await callback.message.edit_text(ans, reply_markup=keyboards.KeyboardQuestInfo(), parse_mode=ParseMode.HTML)
    except NameError:
        await callback.message.edit_text("üö∑C—é–¥–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–ª—å–∑—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, –Ω–∞–∂–∞–≤ ‚úîÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å ",
                                         reply_markup=keyboards.KeybaordBackQuest())
        await callback.answer()



# <---------------------------------------------------------------------->


class NpcMoreQuestState(StatesGroup):
    waiting_npc = State()
    waiting_agree = State()


@router.callback_query(F.data == "npcs_quest")
async def npcs_quest(callback: types.CallbackQuery, state: FSMContext):
    try:
        ans = ""
        for npc in info_q_2.npcs:
            ans += f"|<b>{npc.name}</b> ({npc.type})\n {npc.description}\n\n"
        ans += "-----------------------------------------------------\n\n"
        ans += f"<b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –∞ —Ç–∞–∫–∂–µ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ <i>–∏–º—è</i> –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n"

        await callback.message.edit_text(ans, reply_markup=keyboards.KeybaordBackQuestMore(), parse_mode=ParseMode.HTML)
        await state.set_state(NpcMoreQuestState.waiting_npc)
    except NameError:
        await callback.message.edit_text(f"<b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É! –°–ø–µ—Ä–≤–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç</b>", reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
    await callback.answer()


@router.message(NpcMoreQuestState.waiting_npc, F.text)
async def npc_sending_qest(message: types.Message, state: FSMContext):
    global kand_input
    npcs = [char.name for char in info_q_2.npcs]
    print(npcs)
    if message.text in npcs:
        await message.answer('<i>–ù–∞—á–∞–ª–∏ –≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å!</i> –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥',
                             reply_markup=keyboards.KeybaordBackQuestMore(), parse_mode=ParseMode.HTML)
        try:
            for end in info_q_2.npcs:
                print(end.name)
                if message.text == end.name:
                    data = f"setting='{info_2.setting}' type='{end.type}' name='{end.name}', description='{end.description}'"
                    kand_input = await Requestor.get_request(RecommendationsAC(
                        phrases_indication='–ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ñ—Ä–∞–∑ –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è –ø–æ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã personality –∏ description. –¢–∞–∫–∂–µ —Ñ—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –≤–æ—Ç —Ç–∞–∫–∏—Ö —Å–∫–æ–±–∫–∞—Ö ¬´...¬ª'),
                                                             data)
                    print(kand_input)
                    await generate(style='ANIME', width=1024, height=1024,
                                   query=f"{kand_input.kandinsky_appearance}. Stylized: stained glass, watercolor.",
                                   file_name='images/imageNpcQ.png')
                    file = FSInputFile('images/imageNpcQ.png')
                    ans = f"<b>{kand_input.name}</b> ({kand_input.type}|{kand_input.gender})\n\n"
                    ans += f"{kand_input.appearance}\n\n"
                    ans += f"<b>–§—Ä–∞–∑—ã:</b>\n"
                    for phr in kand_input.phrases:
                        ans += f"-<i>{phr.theme}</i>. {phr.phrase}\n\n"
                    await message.answer_photo(file, caption=ans,
                                               reply_markup=keyboards.KeyboardBackMoreInfoWithoutEditQuest(),
                                               parse_mode=ParseMode.HTML)
                    await state.set_state(NpcMoreQuestState.waiting_agree)
        except ClientConnectionError as e:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", reply_markup=keyboards.KeybaordBackQuest())
    else:
        # print('none')
        await message.answer("–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç", reply_markup=keyboards.KeybaordBackQuestMore(),
                             parse_mode=ParseMode.HTML)
        return npc_sending_qest


@router.callback_query(NpcMoreQuestState.waiting_agree, F.data == "send_players")
async def npc_agree_quest(message: types.Message, bot:Bot, state: FSMContext):
    res_master = cursor.execute("SELECT id FROM men")
    ids = [x[0] for x in res_master.fetchall()]

    res_master = cursor.execute("SELECT master FROM men")
    users_master = [x[0] for x in res_master.fetchall()]

    file = FSInputFile('images/imageNpcQ.png')
    ans = f"<b>{kand_input.name}</b>\n\n"
    ans += f"{kand_input.appearance}\n\n"

    for i in range(len(ids)):
        if users_master[i] == message.from_user.username:
            print(ids[i])
            await bot.send_photo(chat_id=ids[i], caption=ans, parse_mode=ParseMode.HTML, photo=file)
    await bot.send_message(chat_id=message.from_user.id, text="–ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", reply_markup=keyboards.KeybaordBackQuest(), parse_mode=ParseMode.HTML)
    await state.clear()

# <---------------------------------------------------------------------->


class EnemyQuestState(StatesGroup):
    waiting_enemy = State()
    waiting_agree = State()


@router.callback_query(F.data == "enemies_quest")
async def enemies_quest(callback: types.CallbackQuery, state: FSMContext):
    try:
        ans = ""
        for npc in info_q_2.enemies:
            ans += f"|<b>{npc.name}</b> ({npc.type})\n {npc.description}\n\n"
        ans += "-----------------------------------------------------\n\n"
        ans += f"<b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –∞ —Ç–∞–∫–∂–µ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ <i>–∏–º—è</i> –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n"

        await callback.message.edit_text(ans, reply_markup=keyboards.KeybaordBackQuestMore(), parse_mode=ParseMode.HTML)
        await state.set_state(EnemyQuestState.waiting_enemy)
    except NameError:
        await callback.message.edit_text(f"<b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É! –°–ø–µ—Ä–≤–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç</b>", reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
    await callback.answer()


@router.message(EnemyQuestState.waiting_enemy, F.text)
async def enemy_sending_quest(message: types.Message, state: FSMContext):
    global kand_input
    enemies = [char.name for char in info_q_2.enemies]
    print(npcs)
    if message.text in enemies:
        await message.answer('<i>–ù–∞—á–∞–ª–∏ –≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å!</i> –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥',
                             reply_markup=keyboards.KeybaordBackQuestMore(), parse_mode=ParseMode.HTML)
        try:
            for end in info_q_2.enemies:
                print(end.name)
                if message.text == end.name:
                    data = f"setting='{info_2.setting}' type='{end.type}' name='{end.name}', description='{end.description}'"
                    kand_input = await Requestor.get_request(RecommendationsAC(
                        phrases_indication='–ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ñ—Ä–∞–∑ –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è –ø–æ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã personality –∏ description. –¢–∞–∫–∂–µ —Ñ—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –≤–æ—Ç —Ç–∞–∫–∏—Ö —Å–∫–æ–±–∫–∞—Ö ¬´...¬ª'),
                                                             data)
                    print(kand_input)
                    await generate(style='ANIME', width=1024, height=1024,
                                   query=f"{kand_input.kandinsky_appearance}. Stylized: stained glass, watercolor.",
                                   file_name='images/imageEnemyQ.png')
                    file = FSInputFile('images/imageEnemyQ.png')
                    ans = f"<b>{kand_input.name}</b> ({kand_input.type}|{kand_input.gender})\n\n"
                    ans += f"{kand_input.appearance}\n\n"
                    ans += f"<b>–§—Ä–∞–∑—ã:</b>\n"
                    for phr in kand_input.phrases:
                        ans += f"-<i>{phr.theme}</i>. {phr.phrase}\n\n"
                    await message.answer_photo(file, caption=ans,
                                               reply_markup=keyboards.KeyboardBackMoreInfoWithoutEditQuest(),
                                               parse_mode=ParseMode.HTML)
                    await state.set_state(EnemyQuestState.waiting_agree)
        except ClientConnectionError as e:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", reply_markup=keyboards.KeyboardQuestInfo())
    else:
        # print('none')
        await message.answer("–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç", reply_markup=keyboards.KeybaordBackQuestMore(),
                             parse_mode=ParseMode.HTML)
        return enemy_sending_quest


@router.callback_query(EnemyQuestState.waiting_agree, F.data == "send_players")
async def npc_agree_quest(message: types.Message, bot:Bot, state: FSMContext):
    res_master = cursor.execute("SELECT id FROM men")
    ids = [x[0] for x in res_master.fetchall()]

    res_master = cursor.execute("SELECT master FROM men")
    users_master = [x[0] for x in res_master.fetchall()]

    file = FSInputFile('images/imageEnemyQ.png')
    ans = f"<b>{kand_input.name}</b>\n\n"
    ans += f"{kand_input.appearance}\n\n"

    for i in range(len(ids)):
        if users_master[i] == message.from_user.username:
            print(ids[i])
            await bot.send_photo(chat_id=ids[i], caption=ans, parse_mode=ParseMode.HTML, photo=file)
    await bot.send_message(chat_id=message.from_user.id, text="–ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", reply_markup=keyboards.KeybaordBackQuest(), parse_mode=ParseMode.HTML)
    await state.clear()


# <---------------------------------------------------------------------->

async def rewards_quest(callback: types.CallbackQuery, state: FSMContext):
    try:
        ans = ""
        for npc in info_q_2.rewards:
            ans += f"|<b>{npc.name}</b>\n {npc.description}\n\n"
        await callback.message.edit_text(ans, reply_markup=keyboards.KeybaordBackQuestMore(), parse_mode=ParseMode.HTML)
    except NameError:
        await callback.message.edit_text(f"<b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É! –°–ø–µ—Ä–≤–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç</b>", reply_markup=keyboards.KeyboardBackMoreInfo(), parse_mode=ParseMode.HTML)
    await callback.answer()


# <---------------------------------------------------------------------->


def register_info_handler(dp: Dispatcher):
    dp.callback_query.register(make_a_choice, F.data == "data")
    dp.callback_query.register(checking_if_ready, F.data == "check_m")
    dp.callback_query.register(choosing_type_survey, F.data == "open")
    dp.callback_query.register(more_info, F.data == "precisely")
    dp.callback_query.register(plot, F.data == "plot")
    dp.callback_query.register(beginning, F.data == "beginning")
    dp.callback_query.register(center, F.data == "center")
    dp.callback_query.register(ending, F.data == "ending")
    dp.message.register(salvation, Command('save'))
    dp.callback_query.register(make_a_choice_quest, F.data == "quest_send")
    dp.callback_query.register(checking_if_ready_quest, F.data == "check_quest")
    dp.callback_query.register(sending_quest_info, F.data == "open_quest")
    dp.callback_query.register(rewards_quest, F.data == "rewards_quest")
